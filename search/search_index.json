{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The System Description provides a high-level view of the EOEPCA architecture as a set of components (building blocks). It provides an entry-point description that focuses on the building-blocks, their interfaces and relationships.</p> <p>A description of each building block is provided to include:</p> <ul> <li>Overview of its role and functional capabilities</li> <li>Interfaces Provided</li> <li>Dependencies (incl. interfaces consumed)</li> </ul>"},{"location":"iam/iam-overview/","title":"Overview","text":"<p>The User Management components are illustrated by the following deployment diagram, which shows Provided interfaces (above) and Required interfaces (below).</p> <p></p> <p>The Login Service provides an OpenID Connection (OIDC) interface for end-user authentication, a User Managed Access (UMA) interface for resource protection, and a System for Cross-domain Identity Management (SCIM) interface for lookup and management of user data. The Login Service interfaces with the PDP via XACML in support of the UMA authorization flow.</p> <p>The Policy Decision Point (PDP) provides a Policy API for creation and management of authorization policies against resources, and a XACML endpoint for validation (decision) of access requests against the defined policies. The PDP interfaces with the SCIM service to obtain user attributes in support of the authorization decision.</p> <p>The Resource Guard aggregates the UMA User Agent and the PEP:</p> <ul> <li>The UMA User Agent integrates with the Nginx request path to intercept and authorize access requests to resource servers (e.g. ADES) - by implementing the Nginx <code>auth_request</code> interface. The UMA User Agent handles the UMA flow to obtain the access token from the Token Endpoint - the policy enforcement is handed off to the PEP via its <code>auth_request</code> interface;</li> <li>The Policy Enforcement Point (PEP) provides a Resources API through which Resource Servers are able to register and manage their resources. The PEP interfaces with the Login Service for UMA flows for resource registration and policy enforcement, and with the PDP Policy API for resource policy registration.</li> </ul> <p>The User Profile provides a web UI for users to manage their configuration within the platform. The User Profile interfaces with the OIDC service for user authentication and with the SCIM service to retrieve and manage user attributes.</p>"},{"location":"iam/iam-overview/#interactions","title":"Interactions","text":"<p>The building block responsibilities and interactions are illustrated by sequence diagrams for key flows.</p>"},{"location":"iam/iam-overview/#resource-creation","title":"Resource Creation","text":"<p>Resource creation is typically triggered by the Resource Servers that host the protected resources.</p> <p></p> <p>The Resource Server calls the Resources API of the PEP, providing the details of the resource to be registered.</p> <p>The PEP registers the resource via the UMA endpoint of the Login Service, which returns the UUID of the new resource.</p> <p>The PEP records the unique resource ID and its associated path in its local database, before registering the authorization policies for the resource/owner via the Policy API of the PDP.</p>"},{"location":"iam/iam-overview/#access-authorization","title":"Access Authorization","text":"<p>Access to Resource Servers and their resources is protected by the Resource Guard, which integrates with Nginx to provide the authorization enforcement. Thus, the clients request is received by Nginx which proxies to the Resource Server based upon the advice of the Resource Guard.</p> <p></p> <p>The authorization request arrives at the UMA User Agent - initially without an access token [Relying Party Token (RPT)] - and is forwarded to the PEP for the authorization enforcement.</p> <p>The PEP uses the URI of the original request to lookup the resource in its local database to obtain the applicable unique resource ID. The PEP calls the Permission Endpoint of the Login Service to obtain an appropriate ticket matching the requested resource and scopes (based upon the request method).</p> <p>The ticket is returned to the UMA User Agent, which accesses the Token Endpoint of the Login Service to exchange the ticket for an access token (RPT).</p> <p>The Login Service calls the XACML Endpoint of the PDP to obtain a policy decision based upon the requesting user, the resource ID and the requested scopes. Following a successful decision, the Login Service returns the RPT (access token) to the UMA User Agent.</p> <p>The UMA User Agent repeats the enforcement request to the PEP, this time with the RPT. The PEP uses the Introspection Endpoint of the Login Service to check the validity of the RPT.</p> <p>The \u2018success\u2019 decision is returned via the UMA User Agent to Nginx, which continues to proxy the request and so delivers the protected resource to the Client.</p>"},{"location":"iam/login-service/","title":"Login Service","text":"<p>The purpose of this section is to identify the building-block, its role in the architecture, and its relationship to the other building-blocks expressed through the interfaces it provides and consumes. The idea is to provide a singular entrypoint to the EOEPCA building-blocks. In the first instant, gather relevant information from existing docs/wikis where it exists, and collate here. Use dedicated markdown files to separate the sub-section content if needed. Use diagrams where useful.</p>"},{"location":"iam/login-service/#description","title":"Description","text":"<p>Description to include:</p> <ul> <li>role in the architecture</li> <li>functional capabilities</li> </ul>"},{"location":"iam/login-service/#interfaces","title":"Interfaces","text":"<p>Specification of interfaces provided by the component. Link to external specifications if applicable.</p>"},{"location":"iam/login-service/#openid-connection-oidc","title":"OpenID Connection (OIDC)","text":"<p>Interface for the authentication of end-users.</p> <p>Ref. https://gluu.org/docs/gluu-server/4.1/api-guide/openid-connect-api/</p> <ul> <li>Discovery<ul> <li><code>/.well-known/openid-configuration</code><ul> <li><code>GET</code>: Get configuration</li> </ul> </li> </ul> </li> <li>Authorization<ul> <li><code>/oxauth/restv1/authorize</code><ul> <li><code>GET</code>: Request end-user authentication</li> <li><code>POST</code>: Request end-user authentication</li> </ul> </li> </ul> </li> <li>Token Endpoint<ul> <li><code>/oxauth/restv1/token</code><ul> <li><code>POST</code>: Obtain access token, ID token, refresh token</li> </ul> </li> </ul> </li> <li>Client Info<ul> <li><code>/oxauth/restv1/clientinfo</code><ul> <li><code>GET</code>: Request info regarding client claims</li> <li><code>POST</code>: Request info regarding client claims</li> </ul> </li> </ul> </li> <li>Client Registration<ul> <li><code>/oxauth/restv1/register</code><ul> <li><code>GET</code>: Retrieve client metadata</li> <li><code>POST</code>: Register new dynamic client</li> <li><code>PUT</code>: Update client metadata</li> </ul> </li> </ul> </li> <li>End Session<ul> <li><code>/oxauth/restv1/end_session</code><ul> <li><code>GET</code>: Request end session</li> </ul> </li> </ul> </li> <li>User Info<ul> <li><code>/oxauth/restv1/userinfo</code><ul> <li><code>GET</code>: Retrieve claims about the authenticated end-user</li> <li><code>POST</code>: Retrieve claims about the authenticated end-user</li> </ul> </li> </ul> </li> </ul>"},{"location":"iam/login-service/#user-managed-access-uma","title":"User Managed Access (UMA)","text":"<p>Interface for the protection of resources by resource servers.</p> <p>Ref. https://gluu.org/docs/gluu-server/4.1/api-guide/uma-api/</p> <ul> <li>Discovery<ul> <li><code>/.well-known/uma2-configuration</code><ul> <li><code>GET</code>: Get configuration</li> </ul> </li> </ul> </li> <li>Token Endpoint<ul> <li><code>/oxauth/restv1/token</code><ul> <li><code>POST</code>: Request RPT</li> </ul> </li> </ul> </li> <li>Resource Registration<ul> <li><code>/oxauth/restv1/host/rsrc/resource_set</code><ul> <li><code>GET</code>: List resources</li> <li><code>POST</code>: Create resource</li> </ul> </li> <li><code>/oxauth/restv1/host/rsrc/resource_set{rsid}</code><ul> <li><code>GET</code>: Get resource</li> <li><code>PUT</code>: Update resource</li> <li><code>DELETE</code>: Delete resource</li> </ul> </li> </ul> </li> <li>Permission Registration<ul> <li><code>/oxauth/restv1/host/rsrc/resource_set</code><ul> <li><code>POST</code>: Register resource permission</li> </ul> </li> </ul> </li> <li>Token Introspection<ul> <li><code>/oxauth/restv1/rpt/status</code><ul> <li><code>POST</code>: Token introspection</li> </ul> </li> </ul> </li> </ul>"},{"location":"iam/login-service/#system-for-cross-domain-identity-management-scim","title":"System for Cross-domain Identity Management (SCIM)","text":"<p>Interface for retrieving and manipulating user data.</p> <p>Ref. https://gluu.org/docs/gluu-server/4.1/api-guide/scim-api/</p> <ul> <li>Users<ul> <li><code>/identity/restv1/scim/v2/Users</code><ul> <li><code>GET</code>: Search users based on filter criteria</li> <li><code>POST</code>: Create user</li> </ul> </li> <li><code>/identity/restv1/scim/v2/Users/.search</code><ul> <li><code>POST</code>: Search users based on filter criteria</li> </ul> </li> <li><code>/identity/restv1/scim/v2/Users/{id}</code><ul> <li><code>GET</code>: Retrieve a user by ID</li> <li><code>PUT</code>: Update a user</li> <li><code>PATCH</code>: Modify a user</li> <li><code>DELETE</code>: Delete a user</li> </ul> </li> </ul> </li> <li>Groups<ul> <li><code>/identity/restv1/scim/v2/Groups</code><ul> <li><code>GET</code>: Search groups based on filter criteria</li> <li><code>POST</code>: Create group</li> </ul> </li> <li><code>/identity/restv1/scim/v2/Groups/.search</code><ul> <li><code>POST</code>: Search groups based on filter criteria</li> </ul> </li> <li><code>/identity/restv1/scim/v2/Groups/{id}</code><ul> <li><code>GET</code>: Retrieve a group by ID</li> <li><code>PUT</code>: Update a group</li> <li><code>PATCH</code>: Modify a group</li> <li><code>DELETE</code>: Delete a group</li> </ul> </li> </ul> </li> <li>FIDO Devices<ul> <li><code>/identity/restv1/scim/v2/FidoDevices</code></li> <li><code>/identity/restv1/scim/v2/Fido2Devices</code><ul> <li><code>GET</code>: Search FIDO devices based on filter criteria</li> </ul> </li> <li><code>/identity/restv1/scim/v2/FidoDevices/.search</code></li> <li><code>/identity/restv1/scim/v2/Fido2Devices/.search</code><ul> <li><code>POST</code>: Search FIDO devices based on filter criteria</li> </ul> </li> <li><code>/identity/restv1/scim/v2/FidoDevices/{id}</code></li> <li><code>/identity/restv1/scim/v2/Fido2Devices/{id}</code><ul> <li><code>GET</code>: Retrieve a FIDO device by ID</li> <li><code>PUT</code>: Update a FIDO device</li> <li><code>PATCH</code>: Modify a FIDO device</li> <li><code>DELETE</code>: Delete a FIDO device</li> </ul> </li> </ul> </li> <li>Bulk Operations<ul> <li><code>/identity/restv1/scim/v2/Bulk</code><ul> <li><code>POST</code>: Apply bulk operation</li> </ul> </li> </ul> </li> <li>Search<ul> <li><code>/identity/restv1/scim/v2/.search</code><ul> <li><code>POST</code>: Search resources based on filter criteria</li> </ul> </li> </ul> </li> <li>Service Metadata<ul> <li><code>/identity/restv1/scim/v2/ServiceProvider</code><ul> <li>GET: Retrieve information about the capabilities of the server</li> </ul> </li> <li><code>/identity/restv1/scim/v2/ResourceTypes</code><ul> <li>GET: Retrieve information about the types of resources available in the service</li> </ul> </li> <li><code>/identity/restv1/scim/v2/Schemas</code><ul> <li>GET: Retrieve the schemas in use by available resources</li> </ul> </li> </ul> </li> </ul>"},{"location":"iam/login-service/#dependencies","title":"Dependencies","text":"<p>Describe links with other eoepca components - e.g. interfaces consumed.</p>"},{"location":"iam/login-service/#additional-information","title":"Additional Information","text":"<p>Include descriptions of anything that is relevant to help users of the component. Links to other relevant information.</p>"},{"location":"iam/pdp/","title":"PDP - Policy Decision Point","text":"<p>The purpose of this section is to identify the building-block, its role in the architecture, and its relationship to the other building-blocks expressed through the interfaces it provides and consumes. The idea is to provide a singular entrypoint to the EOEPCA building-blocks. In the first instant, gather relevant information from existing docs/wikis where it exists, and collate here. Use dedicated markdown files to separate the sub-section content if needed. Use diagrams where useful.</p>"},{"location":"iam/pdp/#description","title":"Description","text":"<p>Description to include:</p> <ul> <li>role in the architecture</li> <li>functional capabilities</li> </ul>"},{"location":"iam/pdp/#interfaces","title":"Interfaces","text":"<p>Specification of interfaces provided by the component. Link to external specifications if applicable.</p>"},{"location":"iam/pdp/#policy-api","title":"Policy API","text":"<p>TODO</p>"},{"location":"iam/pdp/#extensible-access-control-markup-language-xacml","title":"eXtensible Access Control Markup Language (XACML)","text":"<ul> <li>XACML REST Profile http://docs.oasis-open.org/xacml/xacml-rest/v1.1/xacml-rest-v1.1.html</li> <li>XACML JSON Profile http://docs.oasis-open.org/xacml/xacml-json-http/v1.1/xacml-json-http-v1.1.html</li> </ul>"},{"location":"iam/pdp/#dependencies","title":"Dependencies","text":"<p>Describe links with other eoepca components - e.g. interfaces consumed.</p>"},{"location":"iam/pdp/#additional-information","title":"Additional Information","text":"<p>Include descriptions of anything that is relevant to help users of the component. Links to other relevant information.</p>"},{"location":"iam/pep/","title":"PEP - Policy Enforcement Point","text":"<p>The purpose of this section is to identify the building-block, its role in the architecture, and its relationship to the other building-blocks expressed through the interfaces it provides and consumes. The idea is to provide a singular entrypoint to the EOEPCA building-blocks. In the first instant, gather relevant information from existing docs/wikis where it exists, and collate here. Use dedicated markdown files to separate the sub-section content if needed. Use diagrams where useful.</p>"},{"location":"iam/pep/#description","title":"Description","text":"<p>Description to include:</p> <ul> <li>role in the architecture</li> <li>functional capabilities</li> </ul>"},{"location":"iam/pep/#interfaces","title":"Interfaces","text":"<p>Specification of interfaces provided by the component. Link to external specifications if applicable.</p>"},{"location":"iam/pep/#nginx-auth_request","title":"Nginx <code>auth_request</code>","text":"<p>TODO</p>"},{"location":"iam/pep/#resources-api","title":"Resources API","text":"<p>TODO</p>"},{"location":"iam/pep/#dependencies","title":"Dependencies","text":"<p>Describe links with other eoepca components - e.g. interfaces consumed.</p>"},{"location":"iam/pep/#additional-information","title":"Additional Information","text":"<p>Include descriptions of anything that is relevant to help users of the component. Links to other relevant information.</p>"},{"location":"iam/resource-guard/","title":"Resource Guard","text":""},{"location":"iam/resource-guard/#description","title":"Description","text":"<p>The Resource Guard provides protection of a Resource Server by application of two sub-components:</p> <ul> <li> <p>UMA User Agent   Integrates with nginx by providing an <code>auth_request</code> endpoint through which nginx reverse-proxy (ingress controller) can obtain authorization before proxying a request.   Defers to the PEP for the policy enforcement. The UMA User Agent acts as a UMA client in its interactions with the PEP, and interfaces to the Token Endpoint of the system Authorization Server to follow the UMA flow.</p> </li> <li> <p>Policy Enforcement Point (PEP)   Integrates with the <code>UMA User Agent</code> by providing an <code>auth_request</code> endpoint through which the UMA User Agent can obtain authorization as a UMA client.   The PEP integrates with the system Authorization Server to engage in the UMA flow.</p> </li> </ul> <p>Both the UMA User Agent and the PEP offer an HTTP interface in accordance with the nginx module <code>ngx_http_auth_request_module</code>. The authorization flow chains <code>nginx -&gt; UMA User Agent -&gt; PEP</code>, as illustrated in the following sequence diagram.</p> <p></p> <p>Thus the Resource Guard is deployed as a <code>UMA User Agent</code>/<code>Policy Enforcement Point</code> pair that have been coherently configured to protect a given Resource Server.</p> <p>For more information see the descriptions of the UMA User Agent and Policy Enforcement Point.</p>"},{"location":"iam/resource-guard/#interfaces","title":"Interfaces","text":"<p>See the interface specifications for the UMA User Agent and Policy Enforcement Point.</p>"},{"location":"iam/resource-guard/#dependencies","title":"Dependencies","text":"<p>The Resource Guard is an \u2018umbrella\u2019 component that comprises and so entirely depends upon the UMA User Agent and Policy Enforcement Point.</p>"},{"location":"iam/resource-guard/#additional-information","title":"Additional Information","text":"<p>The Resource Guard is deployed using the helm chart that is available at the EOEPCA Helm Chart Repository.</p>"},{"location":"iam/uma-user-agent/","title":"UMA User Agent","text":""},{"location":"iam/uma-user-agent/#description","title":"Description","text":"<p>The UMA User Agent implements a UMA (User Managed Access) client to obtain an access token on behalf of the end-user.</p> <p>All access attempts to a Resource Server, (e.g. Catalogue, Data Access, ADES, etc.), are subject to the policy enforcement of the PEP (Policy Enforcement Point). For reasons of performance, it is desirable for Nginx to act as the reverse-proxy in this protection flow, rather than the proxy function of the PEP which is not designed for large numbers of concurrent requests or large data volumes.</p> <p>Through the Module ngx_http_auth_request_module, Nginx provides a mechanism in which its reverse-proxy function can defer the authorization decision to a subrequest, and so offer protected access. Hence, this <code>auth_request</code> interface offers a means to invoke the services of the PEP, whilst maintaining proxy performance.</p> <p>The <code>auth_request</code> approach invokes the subrequest with the expectation to receive one of three possible responses: <code>2xx (OK)</code>, <code>401 (Unauthorized)</code>, <code>403 (Forbidden)</code>. Only 2xx (OK) <code>auth_request</code> responses will permit the onward proxy of the request. Otherwise the <code>401</code>/<code>403</code> response is returned to the client.</p> <p>In order to inform its decision the PEP is provided with pertinent request information through http headers set by nginx in the subrequest: <code>X-Original-Method</code> (http method of client request); <code>X-Original-Uri</code> (path to the requested resource).</p> <p>The PEP implements the nginx <code>auth_request</code> interface and so returns <code>2xx</code>, <code>401</code> or <code>403</code>. In the case of a <code>401</code> response, then the PEP expects the client to follow the UMA (User Managed Access) flow, using the <code>ticket</code> that is provided in the <code>Www-Authenticate</code> header it returns with the <code>401</code> response.</p> <p>A typical client, such as a browser, is not in a position to follow the UMA flow. Thus, the UMA User Agent performs the role of UMA client on behalf of the end-user client (user agent). The UMA User Agent sits between nginx and the PEP, to intercept the PEP <code>401</code> responses (with <code>Www-Authenticate</code> header) to follow the UMA flow, exchanging a <code>ticket</code> for an RPT (Relying Party Token), which can then be re-presented to the PEP and so gain authorization.</p> <p>This flow, and the chaining of the UMA User Agent -&gt; PEP in the nginx <code>auth_request</code> subrequest, is illustrated in the following sequence diagram.</p> <p></p>"},{"location":"iam/uma-user-agent/#interfaces","title":"Interfaces","text":""},{"location":"iam/uma-user-agent/#http-request","title":"HTTP Request","text":"<p>The UMA User Agent supports the following inputs on the http subrequest from nginx:</p> <p>http headers</p> <ul> <li><code>X-Original-Method</code>: http method of client request</li> <li><code>X-Original-Uri</code>: path to the requested resource</li> <li><code>Authorization</code>: carrying <code>Bearer</code> token for user ID (optional)</li> <li><code>X-User-Id</code>: user ID token from OIDC (optional)</li> </ul> <p>http cookie</p> <ul> <li><code>auth_user_id</code>: user ID token from OIDC (optional) Cookie name is configurable</li> <li><code>auth_rpt-&lt;endpoint-name&gt;</code>: RPT from previous successful access (optional) Cookie name is configurable</li> </ul> <p>User ID Token</p> <p>There are three means through which the User ID Token (from OIDC) can be presented to the UMA User Agent. These are in priority order:</p> <ol> <li><code>Authorization</code> header as a bearer token - in the form: <code>Authorization: Bearer &lt;token&gt;</code></li> <li><code>X-User-Id</code> header</li> <li><code>auth_user_id</code> cookie (name of cookie is configurable)</li> </ol>"},{"location":"iam/uma-user-agent/#http-response","title":"HTTP Response","text":"<p>The UMA User Agent sets the following headers in the http response:</p> <ul> <li>Response <code>2xx (OK)</code>:<ul> <li><code>X-User-Id</code>: user ID token, to be passed-on to the target Resource Server</li> <li><code>X-Auth-Rpt</code>: RPT from successful authorization</li> <li><code>X-Auth-Rpt-Options</code>: cookie options for RPT</li> </ul> </li> <li>Response <code>401 (Unauthorized)</code>:<ul> <li>Www-Authenticate: defines http authorization methods</li> </ul> </li> <li>Response <code>403 (Forbidden)</code>: No specific headers</li> </ul>"},{"location":"iam/uma-user-agent/#openapi-document","title":"OpenAPI Document","text":"<p>TBD</p>"},{"location":"iam/uma-user-agent/#dependencies","title":"Dependencies","text":"<p>The UMA User Agent integrates with:</p> <ul> <li>nginx     Nginx is configured via its <code>auth_request</code> module to invoke the UMA User Agent before allowing the request.</li> <li>PEP     The UMA User Agent relies on the PEP to provide the enforcement decision. This is achieved by chaining the <code>auth_request</code> to the PEP.</li> <li>Authorization Server     The UMA User Agent follows the UMA flow by interfacing with the token endpoint of the Authorization Server that is identified in the response received back from the PEP.</li> </ul>"},{"location":"iam/uma-user-agent/#additional-information","title":"Additional Information","text":"<p>Describe the configuration of the agent binary, and the configuration of nginx.</p>"},{"location":"iam/user-profile/","title":"User Profile","text":"<p>The purpose of this section is to identify the building-block, its role in the architecture, and its relationship to the other building-blocks expressed through the interfaces it provides and consumes. The idea is to provide a singular entrypoint to the EOEPCA building-blocks. In the first instant, gather relevant information from existing docs/wikis where it exists, and collate here. Use dedicated markdown files to separate the sub-section content if needed. Use diagrams where useful.</p>"},{"location":"iam/user-profile/#description","title":"Description","text":"<p>Description to include:</p> <ul> <li>role in the architecture</li> <li>functional capabilities</li> </ul>"},{"location":"iam/user-profile/#interfaces","title":"Interfaces","text":"<p>Specification of interfaces provided by the component. Link to external specifications if applicable.</p>"},{"location":"iam/user-profile/#dependencies","title":"Dependencies","text":"<p>Describe links with other eoepca components - e.g. interfaces consumed.</p>"},{"location":"iam/user-profile/#additional-information","title":"Additional Information","text":"<p>Include descriptions of anything that is relevant to help users of the component. Links to other relevant information.</p>"},{"location":"processing/ades/","title":"ADES - Application Deployment &amp; Execution Service [TODO]","text":"<p>The purpose of this section is to identify the building-block, its role in the architecture, and its relationship to the other building-blocks expressed through the interfaces it provides and consumes. The idea is to provide a singular entrypoint to the EOEPCA building-blocks. In the first instant, gather relevant information from existing docs/wikis where it exists, and collate here. Use dedicated markdown files to separate the sub-section content if needed. Use diagrams where useful.</p>"},{"location":"processing/ades/#description","title":"Description","text":"<p>Description to include:</p> <ul> <li>role in the architecture</li> <li>functional capabilities</li> </ul>"},{"location":"processing/ades/#interfaces","title":"Interfaces","text":"<p>Specification of interfaces provided by the component. Link to external specifications if applicable.</p>"},{"location":"processing/ades/#dependencies","title":"Dependencies","text":"<p>Describe links with other eoepca components - e.g. interfaces consumed.</p>"},{"location":"processing/ades/#additional-information","title":"Additional Information","text":"<p>Include descriptions of anything that is relevant to help users of the component. Links to other relevant information.</p>"},{"location":"processing/pde/","title":"PDE - Processor Development Environment","text":"<p>The purpose of this section is to identify the building-block, its role in the architecture, and its relationship to the other building-blocks expressed through the interfaces it provides and consumes. The idea is to provide a singular entrypoint to the EOEPCA building-blocks. In the first instant, gather relevant information from existing docs/wikis where it exists, and collate here. Use dedicated markdown files to separate the sub-section content if needed. Use diagrams where useful.</p> <p>The Processor Development Environment (PDE) provides integrated web tooling to perform interactive analysis and to develop, test and package apps for ADES execution. It provides an environment that seeks to replicate the conditions an application experiences when running in the ADES on a platform.</p>"},{"location":"processing/pde/#description","title":"Description","text":"<p>Description to include:</p> <ul> <li>role in the architecture</li> <li>functional capabilities</li> </ul> <p>The PDE comprises two main parts:</p> <ul> <li>JupyterHub Instance   Provides the multi-user entrypoint through which the user logs-in and from where their interactive environment is spawned.</li> <li>PDE Container   Provides the interactive environment, an instance of which is spawned for each authenticated user.</li> </ul>"},{"location":"processing/pde/#jupyterhub","title":"JupyterHub","text":"<p>The entry-point to the PDE service is provided through an instance of JupyterHub - as described at https://jupyterhub.readthedocs.io/en/stable/.</p> <p>For EOEPCA, the PDE is designed for deployment to Kubernetes via the PDE helm chart, that is based upon the \u2018Zero to JupyterHub with Kubernetes\u2019 distribution that is provided at https://zero-to-jupyterhub.readthedocs.io/en/latest/.</p> <p>At the core of the distribution is the JupyterHub <code>jupyterhub/jupyterhub</code> container image - see DockerHub https://hub.docker.com/r/jupyterhub/jupyterhub. In the <code>jupyterhub/jupyterhub</code> image, the JupyterHub service is configured via the file <code>/srv/jupyterhub/jupyterhub_config.py</code>.</p> <p>JupyterHub spawns a service instance for each user that logs in to the hub. Instances can be spawned as containers using the <code>DockerSpawner</code> or <code>KubeSpawner</code>. In the case of EOEPCA the <code>KubeSpawner</code> is used. The spawner is configured via the <code>jupyterhub_config.py</code> file.</p> <p>Access to the spawned \u2018single-user servers\u2019 is proxied via the JupyterHub entry-point. Thus, all access to the hub and the associated user PDE sessions is made through the hub and its proxy.</p> <p>More details regarding the JupyterHub architecture are available at https://jupyterhub.readthedocs.io/en/stable/reference/technical-overview.html.</p>"},{"location":"processing/pde/#pde-container","title":"PDE Container","text":"<p>The PDE container is an implementation of the so-called \u2018single-user notbook servers\u2019 that are designed to be spawned by JupyterHub for each authenticated user. Typically these single-user-servers are based-upon a JupyterLab instance. For the PDE a base JupyterLab container is enriched to provide additional tooling - for example the Theia IDE.</p>"},{"location":"processing/pde/#interfaces","title":"Interfaces","text":"<p>Specification of interfaces provided by the component. Link to external specifications if applicable.</p>"},{"location":"processing/pde/#jupyterhub-configuration","title":"JupyterHub Configuration","text":"<p>The JupyterHub service is configured via the file <code>/srv/jupyterhub/jupyterhub_config.py</code>:</p> <ul> <li>Basics: https://jupyterhub.readthedocs.io/en/stable/getting-started/config-basics.html</li> <li>Detailed: https://jupyterhub.readthedocs.io/en/stable/reference/</li> </ul>"},{"location":"processing/pde/#pde-container-configuration","title":"PDE Container Configuration","text":"<p>TODO</p>"},{"location":"processing/pde/#dependencies","title":"Dependencies","text":"<p>Describe links with other eoepca components - e.g. interfaces consumed.</p>"},{"location":"processing/pde/#additional-information","title":"Additional Information","text":"<p>Include descriptions of anything that is relevant to help users of the component. Links to other relevant information.</p>"},{"location":"resources/catalogue/","title":"Resource Catalogue [TODO]","text":"<p>The purpose of this section is to identify the building-block, its role in the architecture, and its relationship to the other building-blocks expressed through the interfaces it provides and consumes. The idea is to provide a singular entrypoint to the EOEPCA building-blocks. This section describes the Resource Catalogue building-block. The relationship of the Resource Catalogue to other components is described in the System Overview.</p>"},{"location":"resources/catalogue/#description","title":"Description","text":"<p>The Use Cases for the Resource Catalogue are described below.</p> <p></p> <ul> <li>Publish Metadata. Metadata can be an input or output for the ADES ( Application Deployment &amp; Execution Service).</li> <li>Publish Product. Metadata relating to a product and containing a reference to that product.</li> <li>Publish Processing Service. Metadata describing a Processing Service.</li> <li>Publish Interactive Application. Metadata describing the needs of an Application.</li> <li>Publish Collection.  Metadata describing a collection of Metadata.</li> <li>Compliance. Metadata compliance required before it is published. </li> <li>Search Metadata.  Find desired Metadata.</li> <li>Search Temporally. Time based search. </li> <li>Search by AOI. Area of Interest based search. </li> <li>Search Input for Data Processing. Input required by a process in the ADES.</li> <li>Search Parameters for Processing. Parameters required to help configure a process in the ADES.</li> <li>Authorisation. This may be requites to perform Publish and Search based Use Cases.</li> </ul>"},{"location":"resources/catalogue/#overview","title":"Overview","text":"<p>The high level design is described below.</p> <p></p>"},{"location":"resources/catalogue/#interfaces","title":"Interfaces","text":"<p>The following interfaces are provided by the Resource Catalogue.</p> <ul> <li>Publishing and Search<ul> <li>OGC CSW 3.0.0 and 2.0.2 interfaces</li> <li>Certified OGC Compliant and OGC Reference Implementation for both CSW 2.0.2 and CSW 3.0.0</li> </ul> </li> <li>Search<ul> <li>OGC OpenSearch with EO, Geo and Time Extensions</li> <li>OGC API Records</li> <li>STAC (SpatioTemporal Asset Catalog)</li> <li>Federated catalogue distributed searching</li> </ul> </li> <li>Metadata<ul> <li>Implements ISO Metadata Application Profile 1.0.0</li> <li>Support for ISO-19115-1 and ISO-19115-2  (Geographic information)</li> </ul> </li> <li>Ingestion<ul> <li>Harvesting support for WMS, WFS, WCS, WPS, WAF, CSW, SOS</li> </ul> </li> </ul>"},{"location":"resources/catalogue/#ingestion-interfaces","title":"Ingestion Interfaces","text":"<p>The Resource Catalogue provides the following interfaces for ingestion of metadata records:</p> <ul> <li>pycsw Python API   Python library with classes for interfacing with pycsw instance - for example to <code>insert()</code> records.</li> <li>pycsw CLI   Command-line tool <code>pycsw-admin.py</code> will import (<code>load-records</code>) records from XML files in the filesystem.</li> <li>OGC CSW Transactions   pycsw supports OGC CSW Transactions for <code>Insert</code>, <code>Update</code> and <code>Delete</code>\u2026<ul> <li>Insert: full XML documents can be inserted as per CSW-T</li> <li>Update: updates can be made as full record updates or record properties against a csw:Constraint</li> <li>Delete: deletes can be made against a csw:Constraint</li> </ul> </li> </ul> <p>TODO: provide some examples for loading records</p>"},{"location":"resources/catalogue/#dependencies","title":"Dependencies","text":"<p>The Resource Catalogue is designed to support the ADES component. It can also be used directly if needed.</p>"},{"location":"resources/catalogue/#additional-information","title":"Additional Information","text":"<p>Please refer to the latest EOEPCA release notes for more information. </p> <p>The Use Cases above were derived from the EOEPCA Use Case Analysis Document.</p>"},{"location":"resources/data-access/","title":"Data Access [TODO]","text":"<p>The purpose of this section is to identify the building-block, its role in the architecture, and its relationship to the other building-blocks expressed through the interfaces it provides and consumes. The idea is to provide a singular entrypoint to the EOEPCA building-blocks. This section describes the Resource Catalogue building-block. The relationship of the Resource Catalogue to other components is described in the System Overview.</p>"},{"location":"resources/data-access/#description","title":"Description","text":"<p>The Use Cases for Data Access are described below.</p> <p></p> <ul> <li>Get Data </li> </ul>"},{"location":"resources/data-access/#overview","title":"Overview","text":"<p>The high level design is described below.</p> <p></p>"},{"location":"resources/data-access/#interfaces","title":"Interfaces","text":"<p>The following interfaces are provided by Data Access.</p> <ul> <li>Get Data<ul> <li>OGC WMS 1.1 - 1.3 interfaces</li> <li>OGC WMTS 1.0 interfaces with automatic caching</li> <li>OGC WCS 2.0 interfaces with EO Application Profile</li> </ul> </li> </ul>"},{"location":"resources/data-access/#harvesting","title":"Harvesting","text":"<p>The Data Access harvester supports following back-ends from which to harvest:</p> <ul> <li>OpenSearch</li> <li>File-based <p>TODO - what is meant by file-based - STAC Catalog?</p> </li> </ul> <p>The harvester supports post-processors to adapt/enrich the harvested metadata before it is registered\u2026</p> <ul> <li>CREODIASOpenSearchSentinel2Postprocessor   Sentinel-2 metadata from the CREODIAS catalogue.</li> </ul> <p>Other post-processors can be plugged-in through configuration of the harvester component.</p>"},{"location":"resources/data-access/#registration","title":"Registration","text":"<p>Data can be directly registered with the Data Access component by pushing a STAC item to the <code>register_queue</code> of the data-access <code>redis</code> service. During registration, the Data Access component also ingests the metadata record to the Resource Catalogue, uisng the pycsw python API.</p>"},{"location":"resources/data-access/#dependencies","title":"Dependencies","text":"<p>The Data Access component is dependent upon the Catalogue and the S3 bucket.</p>"},{"location":"resources/data-access/#additional-information","title":"Additional Information","text":"<p>Please refer to the latest EOEPCA release notes for more information. </p> <p>The Use Cases above were derived from the EOEPCA Use Case Analysis Document.</p>"},{"location":"resources/workspace/","title":"Workspace [TODO]","text":"<p>The purpose of this section is to identify the building-block, its role in the architecture, and its relationship to the other building-blocks expressed through the interfaces it provides and consumes. The idea is to provide a singular entrypoint to the EOEPCA building-blocks. This section describes the Resource Catalogue building-block. The relationship of the Resource Catalogue to other components is described in the System Overview.</p>"},{"location":"resources/workspace/#description","title":"Description","text":"<p>The Use Cases for the Workspace are described below.</p> <p></p> <ul> <li>Ingest Resources.</li> <li>Update Resources.</li> <li>Select Resources.</li> <li>Delete Resources.</li> <li>Visualise Resources.</li> </ul>"},{"location":"resources/workspace/#overview","title":"Overview","text":"<p>The high level design is described below.</p> <p></p>"},{"location":"resources/workspace/#interfaces","title":"Interfaces","text":"<p>The following interfaces are used by the Resource Catalogue.</p> <ul> <li> <p>RESTful service to implement the above Use Cases.</p> <ul> <li>GET /workspaces/  (Select Resources)</li> <li>POST /workspaces/  (Ingest Resources)</li> <li>PATCH /workspaces/  (Update Resources)</li> <li>DELETE /workspaces/  (Delete Resources)</li> </ul> </li> <li> <p>Visualise ???????</p> <ul> <li>OGC WMS 1.1 - 1.3 interfaces</li> <li>OGC WMTS 1.0 interfaces with automatic caching</li> <li>OGC WCS 2.0 interfaces with EO Application Profile</li> </ul> </li> </ul>"},{"location":"resources/workspace/#dependencies","title":"Dependencies","text":"<p>The Workspace is dependent upon the Data Access component and the Catalogue Component.</p>"},{"location":"resources/workspace/#additional-information","title":"Additional Information","text":"<p>Please refer to the latest EOEPCA release notes for more information. </p> <p>The Use Cases above were derived from the EOEPCA Use Case Analysis Document.</p>"},{"location":"system/overview/","title":"Overview [TODO]","text":"<p>High level overview of the system.</p> <p></p>"}]}